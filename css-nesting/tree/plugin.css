@property --top {
	syntax: '<length>';
	initial-value: 0;
	inherits: true;
}

@property --parent-top {
	syntax: '<length>';
	initial-value: 0;
	inherits: true;
}

/* @property --angle2 {
	syntax: '<angle>';
	initial-value: 0deg;
	inherits: true;
} */

ul.tree {
	--_node-color: var(--node-color, hsl(220 10% 50% / .2));
	--_line-color: var(--line-color, color-mix(in oklab, hsl(220 10% 50%) 70%, canvas));
	--_line-thickness: var(--line-thickness, .1em);
	--_line-min-width: var(--line-min-width, 3rem);

	&,
	& ul {
		--parent-top: var(--top);
		--parent-left: var(--left);
		--parent-width: var(--width);
		--parent-height: var(--height);

		margin: 0;
		padding: 0;
	}

	& ul {
		flex: 1;
	}

	& > li {
		margin: 0;
	}

	& li {
		--Δtop: calc(var(--parent-top) - var(--top));
		--Δleft: calc(var(--parent-left) - var(--left));

		position: relative;
		display: flex;
		align-items: center;
		margin: .3em 0;
	}

	& .node {
		order: 0;

		&:where(.generated) {
			/* Default styling for generated wrapper nodes */
			padding: .3em .5em .15em;
			background: var(--_node-color);
			border-radius: .2em;
			text-decoration: none;
			white-space: nowrap;
		}

		/* Leaf node */
		&:is(.tree-flushend *):not(:has(+ ul)) {
			xmargin-left: auto;
		}
	}

	& li li {
		--_arrowhead-aspect-ratio: var(--arrowhead-aspect-ratio, 1.1);
		--_arrowhead-width: var(--arrowhead-width, calc(6 * var(--_line-thickness)));

		/* Lines */
		& > .line {
			content: "";
			display: flex;
			align-items: center;
			justify-content: end;
			min-width: var(--_line-min-width);
			height: var(--_line-thickness);
			--dy: calc(-1 * var(--Δtop) - (var(--parent-height, 0) - var(--height)) / 2);
			--angle2: atan2(var(--dy), var(--_line-min-width) * 16);
			transform: translateY(-50%) skewY(var(--angle2)) scaleY(calc(1 / cos(var(--angle2))));
			transform-origin: right;
			margin: 0;
			border-radius: 0;
			background: var(--_line-color);

			/* Arrows */
			&:is(.arrows *) {
				margin-right: var(--_line-thickness);

				&::after {
					content: "";
					position: relative;
					z-index: 1;
					margin-right: calc(-1.1 * var(--_line-thickness));
					background: var(--_line-color);
					height: var(--_arrowhead-width);
					aspect-ratio: var(--_arrowhead-aspect-ratio);
					clip-path: polygon(0 0, 100% 50%, 0 100%);
					transform-origin: right;
					transform: scaleY(calc(cos(var(--angle2))))
					           skewY(calc(-1 * var(--angle2)))
							   rotate(var(--angle2));
				}
			}
		}

		&:is(.tree-flushend *):not(:has(ul)) {
			& > .line {
				flex: 1;
			}
		}
	}

	/*&.vertical {
		--_line-min-width: 3rem;

		& li {
			flex-flow: column;
			font-size: 85%;

			& li {
				margin-top: var(--_line-min-width);
				margin-left: 0;

				& .node {
					&::before {
						top: auto;
						bottom: 100%;
						right: 50%;
						height: var(--_line-min-width);
						width: var(--_line-thickness);
						transform: none;
					}
				}
			}
		}
	}*/
}
